swagger: "2.0"

info:
  version: "0.0.1"
  title: Movies API
  description: "This is a simple REST API for Netguru, created as a recruitment task"

basePath: /v1

schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

tags:
- name: "Movies"
  description: "Everything from movies"
- name: "Comments"
  description: "Everything from comments"

paths:
  /comments:
    x-swagger-router-controller: comments
    get:
      tags:
      - "Comments"
      summary: "Fetches all comments"
      description: "Fetches all coments or all comments for particular uuid"
      operationId: getComments
      parameters:
        - in: query
          name: movieUuid
          type: string
          pattern: "[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}"
          description: "Uuid of the movie from which comments should be taken"
        - in: query
          name: offset
          type: integer
          description: The number of items to skip before starting to collect the result set.
          default: 0
          minimum: 0
        - in: query
          name: limit
          type: integer
          description: The numbers of items to return.
          default: 10
          maximum: 100
          minimum: 1
        - in: query
          name: page
          type: integer
          description: The page of items to return (10 items per page)
          default: 1
          minimum: 1
      responses:
        "200":
          description: "Success! Comments has been fetched!"
          schema:
            $ref: "#/definitions/CommentsCollection"

        default:
          description: "Error while trying to get comments"
          schema:
            $ref: "#/definitions/ErrorResponse"

    post:
      tags:
      - "Comments"
      summary: "Post the comment"
      description: "Post the comment to some movie"
      operationId: postComment
      parameters:
        - in: body
          name: comment
          required: true
          description: "Comment to post"
          schema:
            type: object
            properties:
              movieUuid:
                type: string
                pattern: "[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}"
                example: "23232333-303f-11e8-9d67-97825c1fe441"
              text:
                type: string
                pattern: "(.+){10,}"

      responses:
        "201":
          description: "Success! Comment has been posted"
          schema:
            $ref: "#/definitions/Comment"

        default:
          description: "Error while trying to get comments"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /movies:
    x-swagger-router-controller: movies
    get:
      tags:
      - "Movies"
      summary: "Fetches list of movies"
      description: "Fetches the list of all movies already present in application database"
      operationId: getMovies
      parameters:
        - in: query
          name: offset
          type: integer
          description: The number of items to skip before starting to collect the result set.
          default: 0
          minimum: 0
        - in: query
          name: limit
          type: integer
          description: The numbers of items to return.
          default: 10
          maximum: 100
          minimum: 1
        - in: query
          name: page
          type: integer
          description: The page of items to return (10 items per page)
          default: 1
          minimum: 1
      responses:
        "200":
          description: "Success! Movies has been fetched"
          schema:
            $ref: "#/definitions/MoviesCollection"

        default:
          description: "Error while trying to get movies"
          schema:
            $ref: "#/definitions/ErrorResponse"

    post:
      tags:
      - "Movies"
      summary: "Post title of the movie"
      description: "Saves the movie which matches the title to our database and returns that movie"
      operationId: postMovie
      consumes:
        - application/json
      parameters:
        - in: body
          name: movieInfo
          required: true
          description: "Title of the movie which should be fetch"
          schema:
            type: object
            required:
              - title
            properties:
              title:
                type: string
                pattern: "[a-zA-Z 0-9 .ĄąĆćĘęŁłŃńÓóŚśŹźŻż]{1,80}"
                example: "Guardians of the Galaxy Vol. 2"

      responses:
        "201":
          description: "Success! Here is your Movie"
          schema:
            $ref: "#/definitions/Movie"
        default:
          description: "If there is no success then the API returns error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /swagger:
    x-swagger-pipe: swagger_raw

definitions:
  Comment:
    properties:
      uuid:
        type: string
        pattern: "[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}"
        example: "37c43ac0-303f-11e8-9d67-97825c1fe441"
      movieUuid:
        type: string
        pattern: "[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}"
        example: "23232333-303f-11e8-9d67-97825c1fe441"
      text:
        type: string

  Movie:
    properties:
      uuid:
        type: string
        pattern: "[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}"
        example: "37c43ac0-303f-11e8-9d67-97825c1fe441"
      title:
        type: string
      year:
        type: integer
      rated:
        type: string
      released:
        type: string
      runtime:
        type: string
      genre:
        type: array
        items:
          type: string
      director:
        type: string
      writer:
        type: string
      actors:
        type: array
        items:
          type: string
      plot:
        type: string
      language:
        type: array
        items:
          type: string
      country:
        type: string
      awards:
        type: string
      poster:
        type: string
      ratings:
        type: array
        items:
          $ref: "#/definitions/Rating"
      metascore:
        type: string
      imdbRating:
        type: string
      imdbVotes:
        type: string
      imdbId:
        type: string
      type:
        type: string
      dvd:
        type: string
      boxOffice:
        type: string
      production:
        type: string
      website:
        type: string
      reponse:
        type: boolean
      updatedAt:
        type: string
      createdAt:
        type: string

  MoviesCollection:
    properties:
      count:
        type: integer
      rows:
        type: array
        items:
          $ref: "#/definitions/Movie"

  CommentsCollection:
    properties:
      count:
        type: integer
      rows:
        type: array
        items:
          $ref: "#/definitions/Comment"


  Rating:
    properties:
      source:
        type: string
      value:
        type: string

  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
